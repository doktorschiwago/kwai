#/bin/bash
echo >&2
echo "CC2" >&2
echo >&2

CLANG_LINE=$@
echo $CLANG_LINE >&2

#path of files
#echo $0 >&2
BASEPATH2=$(dirname "$0")
#echo $BASEPATH2 >&2
BASEPATH=$(realpath "$BASEPATH2")
echo $BASEPATH >&2

#load LLVM Version Info
echo source $BASEPATH/llvm_version.sh >&2
. $BASEPATH/llvm_version.sh

COMPILE_TARGET=0
# 1 generate object precessor of 11 and 14
# 11 compile to object
# 12 compile to shared library
# 13 compile to executable
# 14 link objects to executable

OBJECT_NAME_IN_LINE=0
COMPILE_TARGET=0

COMPILE_ARGUMENTS=""

while getopts ":o:I:L:gO:c:s:v:D:f:e:W:" opt; do
	case $opt in
	o)
		#change -o to generate bitcode
		echo "OBJECT_NAME: " $OPTARG >&2
		OBJECT_NAME=$OPTARG
		OBJECT_NAME_IN_LINE=1
		# setting to 1 as some sort of compilation is requested
		if [ $COMPILE_TARGET -eq 0 ] ; then
			COMPILE_TARGET=1
		fi
		;;
	s)
		echo $OPTARG >&2
		if [[ "$OPTARG" -eq "hared" ]] ; then
			COMPILE_TARGET=12
		fi
		;;
	c)
		COMPILE_TARGET=11
		;;
	*)
		echo $opt  >&2
		COMPILE_ARGUMENTS=$COMPILE_ARGUMENTS" -"$opt
		if [ -n $OPTARG ] ; then
			echo $OPTARG  >&2
			COMPILE_ARGUMENTS=$COMPILE_ARGUMENTS""$OPTARG
		fi
		;;
	esac
done 

shift $(($OPTIND - 1))

#further arguments are only evaluated for compile targets above 0

echo "Compile Target: $COMPILE_TARGET" >&2

if [ $COMPILE_TARGET -gt 0 ] ; then
	if [ $COMPILE_TARGET -eq 1 ] ; then
		LIB_PATH=""
		LD_LINE=""
		LINK_LINE=""
		SOURCE_LINE=""
		for arg in $@
		do
			echo $arg
			IS_LINK_LIB=$(echo $arg | grep '^-[l]')
			IS_LINK_PATH=$(echo $arg | grep '^-[L]')
			IS_ARCHIVE_FILE=$(echo $arg | grep '\.a$')
			IS_OBJECT_FILE2=$(echo $arg |  grep -E '\.bc|\.o')
			IS_SOURCE_FILE=$(echo $arg | grep '\.c$')
			IS_OTHER_FILE=$(echo $arg | grep '^[^-]')
			if [ $IS_LINK_PATH ] ; then
				LD_LINE=$LD_LINE" "$arg
			elif [ $IS_LINK_LIB ] ; then
				LD_LINE=$LD_LINE" "$arg
				COMPILE_ARGUMENTS=$COMPILE_ARGUMENTS" "$arg
			elif [ $IS_ARCHIVE_FILE ] ; then
				LINK_LINE=$LINK_LINE" "$arg
				COMPILE_TARGET=14
			elif [ $IS_OBJECT_FILE2 ] ; then
				CLANG_LINE2=$CLANG_LINE2" "$arg
				LINK_LINE=$LINK_LINE" "$arg
				COMPILE_TARGET=14
			elif [ $IS_SOURCE_FILE ] ; then
				CLANG_LINE2=$CLANG_LINE2" "$arg
				SOURCE_LINE=$SOURCE_LINE" "$arg
				if [ -z $OBJECT_NAME ] ; then
					OBJECT_NAME=$(echo $arg | cut -d'.' -f1)
				fi
			else		
				CLANG_LINE2=$CLANG_LINE2" "$arg
			fi
		done
		if [ $COMPILE_TARGET -eq 1 ] ; then
			COMPILE_TARGET=13
		fi
	fi
	echo "Compile Target: $COMPILE_TARGET" >&2

	if [ $COMPILE_TARGET -eq 14 ] ; then
		echo compile to executable $OBJECT_NAME >&2

		if [ -n "$SOURCE_LINE" ] ; then
			echo "compiling source to object: $SOURCE_LINE"
			echo "$CLANG -o /tmp/tmp-$$.bc -emit-llvm $COMPILE_ARGUMENTS -c $SOURCE_LINE  >&2"
			$CLANG -o /tmp/tmp-$$.bc -emit-llvm $COMPILE_ARGUMENTS -c $SOURCE_LINE  >&2
			LINK_LINE=$LINK_LINE" /tmp/tmp-$$.bc"
		fi


		#adding dummy main for f2c to link list
		$CLANG -o /tmp/tmp5-$$.bc -emit-llvm -c $BASEPATH/dummy_main.c  >&2
		LINK_LINE=$LINK_LINE" /tmp/tmp5-$$.bc"

		#echo clang -emit-llvm $CLANG_LINE >&2
		#clang -S -emit-llvm $CLANG_LINE  >&2
		#mv $OBJECT_NAME $OBJECT_NAME.linked.bc
		echo $LLVM_LINK -v -o $OBJECT_NAME.linked.bc $LINK_LINE >&2
		$LLVM_LINK -v -o $OBJECT_NAME.linked.bc $LINK_LINE >&2


		#we use clang to check, wheteher the executable works
		echo $CLANG -o /tmp/tmp2-$$   -lf2c $OBJECT_NAME.linked.bc $COMPILE_ARGUMENTS -lf2c
		$CLANG -o /tmp/tmp2-$$   $OBJECT_NAME.linked.bc $COMPILE_ARGUMENTS -lf2c >&2
		SUCCESS=$?

		if [ $SUCCESS -ne 0 ] ; then
			exit $SUCCESS
		fi

		rm /tmp/tmp2-$$ >&2


		#tryin to figure out which libraries are needed
		#echo llc -filetype=obj -o $OBJECT_NAME.linked.object $OBJECT_NAME.linked.bc
		#llc -filetype=obj -o $OBJECT_NAME.linked.object $OBJECT_NAME.linked.bc
		#echo ld -o $OBJECT_NAME.linked.bin $LD_LINE $OBJECT_NAME.linked.object 
		#ld -o $OBJECT_NAME.linked.bin $LD_LINE $OBJECT_NAME.linked.object 
		echo "#/bin/bash" > $OBJECT_NAME
		echo "LD_PRELOAD=/lib/x86_64-linux-gnu/liblzma.so.5:/lib/x86_64-linux-gnu/libreadline.so.6:/lib/x86_64-linux-gnu/librt.so.1:/usr/lib/libf2c.so.2" >> $OBJECT_NAME
		echo "export LD_PRELOAD"  >> $OBJECT_NAME
		echo "$LLI $(realpath $OBJECT_NAME.linked.bc)" >> $OBJECT_NAME
		chmod a+x $OBJECT_NAME

		if [ -n "$SOURCE_LINE" ] ; then
			rm /tmp/tmp-$$.bc
		fi

		#we use clang to check, wheteher the executable works
		#clang -o /tmp/tmp2-$$  $COMPILE_ARGUMENTS $OBJECT_NAME.linked.bc  -Wl,-Bstatic -lf2c
		echo $CLANG -o /tmp/tmp2-$$ $OBJECT_NAME.linked.bc $COMPILE_ARGUMENTS -Wl,-Bstatic -lf2c 
		$CLANG -o /tmp/tmp2-$$   -lf2c $OBJECT_NAME.linked.bc $COMPILE_ARGUMENTS -lf2c
		

		exit $SUCCESS
		
	elif [ $COMPILE_TARGET -eq 13 ] ; then
		echo compile to executable $OBJECT_NAME >&2
		echo $CLANG $CLANG_LINE >&2
		$CLANG $CLANG_LINE  >&2
	else
		echo $CLANG -emit-llvm $CLANG_LINE >&2
		$CLANG -emit-llvm $CLANG_LINE  >&2
	fi
else
	echo $CLANG $CLANG_LINE >&2
	$CLANG $CLANG_LINE  >&2
fi

echo >&2
echo "----------" >&2
echo >&2
